#!/usr/bin/env python3
"""
Unit tests for AirBnB Clone v2 with support for both File Storage and DB Storage
"""
import unittest
import os
import MySQLdb
from models import storage
from models.state import State
from models.city import City
from models.user import User
from models.place import Place
from models.review import Review
from models.amenity import Amenity
from models.engine.db_storage import DBStorage
from models.engine.file_storage import FileStorage
from console import HBNBCommand
from unittest.mock import patch
from io import StringIO


class TestAirBnB(unittest.TestCase):
    """Test cases for AirBnB Clone v2"""
    
    @classmethod
    def setUpClass(cls):
        """Setup test environment"""
        cls.storage_type = os.getenv('HBNB_TYPE_STORAGE', 'file')
        if cls.storage_type == 'db':
            cls.db = MySQLdb.connect(
                host=os.getenv('HBNB_MYSQL_HOST', 'localhost'),
                user=os.getenv('HBNB_MYSQL_USER', 'hbnb_test'),
                passwd=os.getenv('HBNB_MYSQL_PWD', 'hbnb_test_pwd'),
                db=os.getenv('HBNB_MYSQL_DB', 'hbnb_test_db')
            )
            cls.cursor = cls.db.cursor()

    @classmethod
    def tearDownClass(cls):
        """Cleanup test environment"""
        if cls.storage_type == 'db':
            cls.cursor.close()
            cls.db.close()

    def setUp(self):
        """Set up for each test"""
        if self.storage_type == 'file':
            try:
                os.remove('file.json')
            except:
                pass
            storage._FileStorage__objects = {}
        else:
            storage._DBStorage__session.close()

    def tearDown(self):
        """Clean up after each test"""
        if self.storage_type == 'file':
            try:
                os.remove('file.json')
            except:
                pass
        else:
            storage._DBStorage__session.close()

    def get_db_table_count(self, table_name):
        """Helper method to get record count from database table"""
        if self.storage_type == 'db':
            self.cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            return self.cursor.fetchone()[0]
        return 0

    def test_create_state(self):
        """Test creating a new State"""
        with patch('sys.stdout', new=StringIO()) as output:
            HBNBCommand().onecmd('create State name="California"')
            state_id = output.getvalue().strip()
            
        self.assertTrue(len(state_id) > 0)
        
        if self.storage_type == 'db':
            # Verify database record
            initial_count = self.get_db_table_count('states')
            self.cursor.execute("SELECT * FROM states WHERE id = %s", (state_id,))
            result = self.cursor.fetchone()
            self.assertIsNotNone(result)
            self.assertEqual(result[1], 'California')
        else:
            # Verify file storage
            all_objs = storage.all()
            state_key = f"State.{state_id}"
            self.assertIn(state_key, all_objs)
            self.assertEqual(all_objs[state_key].name, 'California')

    @unittest.skipIf(os.getenv('HBNB_TYPE_STORAGE') != 'db', "DB storage test only")
    def test_db_relationships(self):
        """Test database relationships between State and City"""
        # Create a state
        state = State(name="Texas")
        storage.new(state)
        storage.save()
        
        # Create a city in that state
        city = City(name="Houston", state_id=state.id)
        storage.new(city)
        storage.save()
        
        # Verify the relationship
        self.cursor.execute("""
            SELECT cities.name 
            FROM cities 
            JOIN states ON cities.state_id = states.id 
            WHERE states.name = 'Texas'
        """)
        result = self.cursor.fetchone()
        self.assertIsNotNone(result)
        self.assertEqual(result[0], 'Houston')

    def test_create_user(self):
        """Test creating a new User"""
        with patch('sys.stdout', new=StringIO()) as output:
            HBNBCommand().onecmd(
                'create User email="test@test.com" password="test123" '
                'first_name="John" last_name="Doe"'
            )
            user_id = output.getvalue().strip()
            
        self.assertTrue(len(user_id) > 0)
        
        if self.storage_type == 'db':
            self.cursor.execute("SELECT * FROM users WHERE id = %s", (user_id,))
            result = self.cursor.fetchone()
            self.assertIsNotNone(result)
            self.assertEqual(result[1], 'test@test.com')
        else:
            all_objs = storage.all()
            user_key = f"User.{user_id}"
            self.assertIn(user_key, all_objs)
            self.assertEqual(all_objs[user_key].email, 'test@test.com')

    def test_create_place(self):
        """Test creating a new Place with a User and City"""
        # First create a user
        with patch('sys.stdout', new=StringIO()) as output:
            HBNBCommand().onecmd('create User email="test@test.com" password="test123"')
            user_id = output.getvalue().strip()
            
        # Then create a state and city
        with patch('sys.stdout', new=StringIO()) as output:
            HBNBCommand().onecmd('create State name="California"')
            state_id = output.getvalue().strip()
            
        with patch('sys.stdout', new=StringIO()) as output:
            HBNBCommand().onecmd(f'create City name="San Francisco" state_id="{state_id}"')
            city_id = output.getvalue().strip()
            
        # Finally create the place
        with patch('sys.stdout', new=StringIO()) as output:
            HBNBCommand().onecmd(
                f'create Place city_id="{city_id}" user_id="{user_id}" '
                'name="Beautiful House" description="Amazing view" '
                'number_rooms=3 number_bathrooms=2 max_guest=6 '
                'price_by_night=100 latitude=37.7749 longitude=-122.4194'
            )
            place_id = output.getvalue().strip()
            
        self.assertTrue(len(place_id) > 0)
        
        if self.storage_type == 'db':
            self.cursor.execute("SELECT * FROM places WHERE id = %s", (place_id,))
            result = self.cursor.fetchone()
            self.assertIsNotNone(result)
            self.assertEqual(result[1], 'Beautiful House')
        else:
            all_objs = storage.all()
            place_key = f"Place.{place_id}"
            self.assertIn(place_key, all_objs)
            self.assertEqual(all_objs[place_key].name, 'Beautiful House')

    def test_pep8_compliance(self):
        """Test PEP8 compliance of all Python files"""
        import pycodestyle
        style_guide = pycodestyle.StyleGuide(quiet=True)
        
        # Add all your Python files to this list
        python_files = [
            'models/base_model.py',
            'models/user.py',
            'models/state.py',
            'models/city.py',
            'models/place.py',
            'models/review.py',
            'models/amenity.py',
            'models/engine/file_storage.py',
            'models/engine/db_storage.py',
            'console.py'
        ]
        
        result = style_guide.check_files(python_files)
        self.assertEqual(result.total_errors, 0, 
                        "Found PEP8 style errors/warnings")

    @unittest.skipIf(os.getenv('HBNB_TYPE_STORAGE') == 'db', "File storage test only")
    def test_file_storage_save_reload(self):
        """Test saving and reloading objects with FileStorage"""
        # Create a state
        state = State(name="California")
        storage.new(state)
        storage.save()
        
        # Clear the storage and reload
        storage._FileStorage__objects = {}
        storage.reload()
        
        # Verify the state was reloaded
        all_objs = storage.all()
        state_key = f"State.{state.id}"
        self.assertIn(state_key, all_objs)
        self.assertEqual(all_objs[state_key].name, "California")

if __name__ == '__main__':
    unittest.main()
